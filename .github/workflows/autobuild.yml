name: Autobuild
on: 
  push:

jobs:
  aarch64_job:
    runs-on: ubuntu-22.04
    name: Build on ubuntu22.04 aarch64
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:master
          platforms: arm64
      - uses: uraimo/run-on-arch-action@v2
        name: Run on aarch64
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/myproject"
          shell: /bin/sh
          install: |
            apt-get update -q -y
            apt-get install -q -y git patchelf python3-pip python-is-python3 libfuse2 wget
          run: |
            mkdir -p /root/.local/bin
            wget -O /root/.local/bin/appimagetool-aarch64.AppImage "https://github.com/AppImage/appimagetool/releases/download/1.9.0/appimagetool-aarch64.AppImage"
            chmod +x /root/.local/bin/appimagetool-aarch64.AppImage
            ln -s /root/.local/bin/appimagetool-aarch64.AppImage /root/.local/bin/appimagetool
            chmod +x /root/.local/bin/appimagetool
            
            ARCH=aarch64 /root/.local/bin/appimagetool-aarch64.AppImage --help
            ARCH=aarch64 /root/.local/bin/appimagetool --help
            
            cd /myproject

            pip install --upgrade pip cx-Freeze

            export PATH="/usr/local/bin:$PATH"
            
            python setup.py bdist_appimage
            ./$(find dist -name "AppImageTestApp-*.AppImage")
            cat success.txt

            # python -m cx_Freeze --script main.py --target-name=executable
            #./$(find build -name "executable")
            # cat success.txt
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build
          path: |
            dist/*.AppImage